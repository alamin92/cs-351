
#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);


// Complete the maximumPerimeterTriangle function below.
vector<int> maximumPerimeterTriangle(vector<int> sticks) {
   vector<int>max;

   sort(sticks.begin(),sticks.end());// to sort the whole thing to go from the bak to the front

    for(int j=sticks.size(); j-2>=0; j--){// to start from the back and decresing thats why j-- and set j-2 so that it doesn;t go negetive. 
      if(sticks[j]+sticks[j-1]>sticks[j-2] && sticks[j]+ sticks[j-2]>sticks[j-1] && sticks[j-1] + sticks[j-2]>sticks[j]){
          max.push_back(sticks[j]);
          max.push_back(sticks[j-1]);
          max.push_back(sticks[j-2]);
      }
      else {
        max.push_back(-1);
      }
      }
    return max;
}

   int main(){

    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;//get the how many number you want to print out or size
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string sticks_temp_temp;
    getline(cin, sticks_temp_temp);//?

    vector<string> sticks_temp = split_string(sticks_temp_temp);//?

    vector<int> sticks(n);// create vector arry of the side numnber which is going to be used for the triangle

    for (int i = 0; i < n; i++) {
        int sticks_item = stoi(sticks_temp[i]);//?

        sticks[i] = sticks_item;//insert sticks into the array vector 

    vector<int> result = maximumPerimeterTriangle(sticks);// passing the value from the function 

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];//?

        if (i != result.size() - 1) {
            fout << " ";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}
  }
  vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}

